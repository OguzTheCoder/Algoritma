#include <iostream>
#include <iomanip>

using namespace std;

const int SIZE = 3; //matris boyutu 

void inputMatrix(int matrix[SIZE][SIZE], const string& name) {
    cout << "Matris elemanları: " << name << " (" << SIZE << "x" << SIZE << "):\n";
    for (int i = 0; i < SIZE; ++i) {
        for (int j = 0; j < SIZE; ++j) {
            cin >> matrix[i][j];
        }
    }
    cout << endl;
}

void displayMatrix(int matrix[SIZE][SIZE], const string& name) {
    cout << "Matris " << name << ":\n";
    for (int i = 0; i < SIZE; ++i) {
        for (int j = 0; j < SIZE; ++j) {
            cout << setw(5) << matrix[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;
}

void addMatrices(int A[SIZE][SIZE], int B[SIZE][SIZE], int C[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; ++i)
        for (int j = 0; j < SIZE; ++j)
            C[i][j] = A[i][j] + B[i][j];
}

void multiplyMatrices(int A[SIZE][SIZE], int B[SIZE][SIZE], int C[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; ++i) {
        for (int j = 0; j < SIZE; ++j) {
            C[i][j] = 0;
            for (int k = 0; k < SIZE; ++k) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

int calculateDeterminant(int matrix[SIZE][SIZE]) {
    return matrix[0][0] * (matrix[1][1] * matrix[2][2] - matrix[1][2] * matrix[2][1]) -
           matrix[0][1] * (matrix[1][0] * matrix[2][2] - matrix[1][2] * matrix[2][0]) +
           matrix[0][2] * (matrix[1][0] * matrix[2][1] - matrix[1][1] * matrix[2][0]);
}

int main() {
    int A[SIZE][SIZE], B[SIZE][SIZE], C[SIZE][SIZE];

    inputMatrix(A, "A");
    inputMatrix(B, "B");

    displayMatrix(A, "A");
    displayMatrix(B, "B");

    addMatrices(A, B, C);
    cout << "Matris toplamı (A + B):\n";
    displayMatrix(C, "A + B");

    multiplyMatrices(A, B, C);
    cout << "Matris çarpımı (A * B):\n";
    displayMatrix(C, "A * B");

    
    int determinant = calculateDeterminant(A);
    cout << "A matrisinin determinantı: " << determinant << endl;

    return 0;
}
